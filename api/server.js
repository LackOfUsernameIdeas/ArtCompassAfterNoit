const express = require("express");
const http = require("http");
const socketIo = require("socket.io");
const { spawn } = require("child_process");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const nodemailer = require("nodemailer");
const bodyParser = require("body-parser");
const crypto = require("crypto");
const db = require("./database.js");
const hf = require("./helper_functions.js");
const pythonPath = require("./config.js").pythonPath;
const pythonPathLocal = require("./config.js").pythonPathLocal;
const SECRET_KEY = require("./credentials.js").SECRET_KEY;
const EMAIL_USER = require("./credentials.js").EMAIL_USER;
const EMAIL_PASS = require("./credentials.js").EMAIL_PASS;
const fs = require("fs");
const path = require("path");

const app = express();
const server = http.createServer(app);
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json());

const whitelist = [
  "http://localhost:5174",
  "http://localhost:5175",
  "https://artcompass.noit.eu",
  "http://artcompass.noit.eu"
];
const corsOptions = {
  origin: function (origin, callback) {
    if (!origin || whitelist.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error("Not allowed by CORS"));
    }
  },
  methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
  allowedHeaders: ["Content-Type", "Authorization"],
  credentials: true,
  optionSuccessStatus: 204
};

app.use(cors(corsOptions));
app.options("*", cors(corsOptions)); // Handle preflight requests

// –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ —Å—ä—â–∏—Ç–µ –æ–ø—Ü–∏–∏ –Ω–∞ CORS –∫—ä–º Socket.IO
const io = socketIo(server, {
  cors: corsOptions
});

let verificationCodes = {};

// –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–µ–Ω –æ–±–µ–∫—Ç —Å –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
const transporter = nodemailer.createTransport({
  host: "noit.eu", // –ó–∞–º–µ–Ω–µ—Ç–µ —Å –≤–∞—à–∏—è cPanel mail —Å—ä—Ä–≤—ä—Ä
  port: 587, // –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ 465 –∑–∞ SSL –∏–ª–∏ 587 –∑–∞ TLS
  secure: false, // true –∑–∞ SSL (–ø–æ—Ä—Ç 465), false –∑–∞ TLS (–ø–æ—Ä—Ç 587)
  auth: {
    user: EMAIL_USER, // –í–∞—à–∏—è—Ç –∏–º–µ–π–ª –∞–¥—Ä–µ—Å
    pass: EMAIL_PASS // –í–∞—à–∞—Ç–∞ –∏–º–µ–π–ª –ø–∞—Ä–æ–ª–∞
  },
  debug: true // –ü–æ –∏–∑–±–æ—Ä, –ª–æ–≥–≤–∞ SMTP –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è—Ç–∞ –∑–∞ –æ—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∏
});

// –†—É—Ç –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post("/signup", (req, res) => {
  const { firstName, lastName, email, password } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–µ–π–ª—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
  db.checkEmailExists(email, (err, result) => {
    if (err)
      return res
        .status(500)
        .json({ error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞ –∫—ä–º –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏" });

    if (result.length > 0) {
      return res
        .status(400)
        .json({ error: "–ü—Ä–æ—Ñ–∏–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞." });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ
    const verificationCode = crypto.randomInt(100000, 999999).toString();

    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –∫–æ–¥–∞
    verificationCodes[email] = {
      code: verificationCode,
      firstName,
      lastName,
      password, // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞
      expiresAt: Date.now() + 15 * 60 * 1000 // –ó–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç –æ—Ç 15 –º–∏–Ω—É—Ç–∏
    };

    // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∫–æ–¥–∞ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–π–ª
    const mailOptions = {
      from: EMAIL_USER,
      to: email,
      subject: "–®–µ—Å—Ç—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –õ–µ–Ω—Ç–∞ –Ω–∞ —É–º–∞ (MindReel)",
      html: `
        <div style="text-align: center; background-color: rgba(244, 211, 139, 0.5); margin: 2% 3%; padding: 3% 1%; border: 4px dotted rgb(178, 50, 0); border-radius: 20px">
          <h2>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∏ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –≤ –õ–µ–Ω—Ç–∞ –Ω–∞ —É–º–∞ (MindReel)!</h2>
          <hr style="border: 0.5px solid rgb(178, 50, 0); width: 18%; margin-top: 6%; margin-bottom: 4%"></hr>
          <p>–í–∞—à–∏—è—Ç —à–µ—Å—Ç—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥ –µ <strong style="font-size: 20px; color: rgb(178, 50, 0)">${verificationCode}</strong>.</p>
        </div>
        <div>
          <p style="border-radius: 5px; background-color: rgba(178, 50, 0, 0.2); text-align: center; font-size: 13px; margin: 5% 25% 0% 25%">–ù–µ —Å—Ç–µ –ø–æ–∏—Å–∫–∞–ª–∏ –∫–æ–¥? –ò–≥–Ω–æ—Ä–∏—Ä–∞–π—Ç–µ —Ç–æ–∑–∏ –∏–º–µ–π–ª.</p>
        </div>`
    };

    // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª–∞ —Å –∫–æ–¥–∞ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ
    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.log("–≥—Ä–µ—à–∫–∞: ", error);
        return res
          .status(500)
          .json({ error: "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º –∏–º–µ–π–ª! :(" });
      }
      res.json({
        message: "–ö–æ–¥—ä—Ç –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω –Ω–∞ –≤–∞—à–∏—è –∏–º–µ–π–ª!"
      });
    });
  });
});

const MAX_REQUESTS_PER_DAY = 20;
let userRequests = {};

app.post("/handle-submit", (req, res) => {
  const token = req.headers.authorization?.split(" ")[1]; // 'Bearer <token>'

  if (!token) {
    return res.status(401).json({ error: "–õ–∏–ø—Å–≤–∞ —Ç–æ–∫–µ–Ω" });
  }

  const { type } = req.body;

  if (!type || (type !== "movies_series" && type !== "books")) {
    return res
      .status(400)
      .json({ error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –ª–∏–ø—Å–≤–∞—â 'type' –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –≤ –∑–∞—è–≤–∫–∞—Ç–∞" });
  }

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –¥–µ–∫–æ–¥–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω–∞
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) {
      return res.status(401).json({ error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ç–æ–∫–µ–Ω" });
    }

    const userId = decoded.id; // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ—Ç–æ ID –æ—Ç —Ç–æ–∫–µ–Ω–∞

    // –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –∑–∞—è–≤–∫–∏—Ç–µ —Å–µ –Ω—É–ª–∏—Ä–∞—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    hf.checkAndResetRequestsDaily(userRequests);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç
    if (!userRequests[userId]) {
      userRequests[userId] = {
        movies_series: { count: 0 },
        books: { count: 0 }
      };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—Ä–æ—è –∑–∞—è–≤–∫–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—è —Ç–∏–ø
    if (userRequests[userId][type].count >= MAX_REQUESTS_PER_DAY) {
      return res.status(400).json({
        error: `–ü—Ä–µ–≤–∏—à–∏—Ö—Ç–µ –º–∞–∫—Å–∏–º–∞–ª–Ω–∏—è –ª–∏–º–∏—Ç –æ—Ç –∑–∞—è–≤–∫–∏ –∑–∞ ${type} –¥–Ω–µ—Å!`
      });
    }

    // –£–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ –±—Ä–æ—è –∑–∞—è–≤–∫–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—è —Ç–∏–ø
    userRequests[userId][type].count += 1;
    userRequests[userId][type].lastRequestTime = new Date().toLocaleString();

    console.log(
      `‚ú®‚ú®‚ú® –ù–û–í–û –ì–ï–ù–ï–†–ò–†–ê–ù–ï! ‚ú®‚ú®‚ú®\nüöÄ –¢–µ–∫—É—â –±—Ä–æ–π –Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—è –∑–∞ ${type}: ${userRequests[userId][type].count}\n‚è∞ ${userRequests[userId][type].lastRequestTime}`
    );
    res.json({ message: `–ó–∞—è–≤–∫–∞—Ç–∞ –∑–∞ ${type} –±–µ—à–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∞!` });
  });
});

// –ü—Ä–µ–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∫–æ–¥, –∞–∫–æ –Ω–µ –µ –ø–æ–ª—É—á–µ–Ω —Ç–∞–∫—ä–≤
app.post("/resend", (req, res) => {
  const { email } = req.body;

  // –ì–µ–Ω–µ—Ä–∏—Ä–∞ –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ
  const verificationCode = crypto.randomInt(100000, 999999).toString();

  // –°—ä—Ö—Ä–∞–Ω—è–≤–∞ –∫–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ
  verificationCodes[email] = {
    ...verificationCodes[email],
    code: verificationCode,
    expiresAt: Date.now() + 15 * 60 * 1000 // –ó–∞–¥–∞–≤–∞ 15 –º–∏–Ω—É—Ç–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç
  };

  // –ò–∑–ø—Ä–∞—â–∞ –Ω–æ–≤ –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–π–ª
  const mailOptions = {
    from: EMAIL_USER,
    to: email,
    subject: "–ù–æ–≤ —à–µ—Å—Ç—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –õ–µ–Ω—Ç–∞ –Ω–∞ —É–º–∞ (MindReel)",
    html: `
      <div style="text-align: center; background-color: rgba(244, 211, 139, 0.5); margin: 2% 3%; padding: 3% 1%; border: 4px dotted rgb(178, 50, 0); border-radius: 20px">
        <p>–í–∞—à–∏—è—Ç —à–µ—Å—Ç—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥ –µ <strong style="font-size: 20px; color: rgb(178, 50, 0)">${verificationCode}</strong>.</p>
      </div>
      <div>
        <p style="border-radius: 5px; background-color: rgba(178, 50, 0, 0.2); text-align: center; font-size: 13px; margin: 5% 25% 0% 25%">–ù–µ —Å—Ç–µ –ø–æ–∏—Å–∫–∞–ª–∏ –∫–æ–¥? –ò–≥–Ω–æ—Ä–∏—Ä–∞–π—Ç–µ —Ç–æ–∑–∏ –∏–º–µ–π–ª.</p>
      </div>`
  };

  console.log(verificationCodes[email]);
  transporter.sendMail(mailOptions, (error, info) => {
    if (error)
      return res
        .status(500)
        .json({ error: "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º –∏–º–µ–π–ª! :(" });
    res.json({ message: "–ö–æ–¥—ä—Ç –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω –Ω–∞ –≤–∞—à–∏—è –∏–º–µ–π–ª!" });
  });
});

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –∏–º–µ–π–ª
app.post("/verify-email", (req, res) => {
  const { email, verificationCode } = req.body;

  const storedData = verificationCodes[email];
  if (!storedData) {
    return res
      .status(400)
      .json({ error: "–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ —Ç–æ–∑–∏ –∏–º–µ–π–ª." });
  }

  if (Date.now() > storedData.expiresAt) {
    delete verificationCodes[email];
    return res.status(400).json({ error: "–ö–æ–¥—ä—Ç –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –µ –∏–∑—Ç–µ–∫—ä–ª." });
  }

  if (storedData.code !== verificationCode) {
    return res.status(400).json({ error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–æ–¥ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ." });
  }

  const salt = bcrypt.genSaltSync(10);
  const hashedPassword = bcrypt.hashSync(storedData.password, salt);

  db.createUser(
    storedData.firstName,
    storedData.lastName,
    email,
    hashedPassword,
    (err, result) => {
      if (err) return res.status(400).json({ error: err.message });

      // –ò–∑—Ç—Ä–∏–≤–∞ –∫–æ–¥–∞ —Å–ª–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      delete verificationCodes[email];
      console.log(`
        ===================================
        üöÄ NEW ACCOUNT CREATED! üéâ
        ===================================
        üü¢ First Name: ${storedData.firstName}
        üü¢ Last Name: ${storedData.lastName}
        üìß Email: ${email}
        üìÖ Date & Time: ${new Date().toLocaleString()}
        ===================================
        `);
      res.json({ message: "–£—Å–ø–µ—à–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª!" });
    }
  );
});

// –í–ª–∏–∑–∞–Ω–µ –≤ –ø—Ä–æ—Ñ–∏–ª
app.post("/signin", (req, res) => {
  const { email, password, rememberMe } = req.body;

  db.findUserByEmail(email, (err, result) => {
    if (err) return res.status(400).json({ error: err.message });
    if (result.length === 0)
      return res
        .status(400)
        .json({ error: "–ù–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å!" });

    const user = result[0];
    const isMatch = bcrypt.compareSync(password, user.password);
    if (!isMatch)
      return res
        .status(400)
        .json({ error: "–í—ä–≤–µ–¥–µ–Ω–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ –µ –≥—Ä–µ—à–Ω–∞ –∏–ª–∏ –Ω–µ–ø—ä–ª–Ω–∞!" });

    const token = jwt.sign({ id: user.id }, SECRET_KEY, {
      expiresIn: rememberMe ? "7d" : "7d"
    });

    console.log(`
      ===================================
      üîë USER LOGGED IN  
      ===================================
      üü¢ First Name: ${user.first_name}
      üü¢ Last Name: ${user.last_name}
      üìß Email: ${email}
      üìÖ Date & Time: ${new Date().toLocaleString()}
      ===================================
      `);

    res.json({ message: "–£—Å–ø–µ—à–Ω–æ –≤–ª–∏–∑–∞–Ω–µ!", token });
  });
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞ –∑–∞—è–≤—è–≤–∞–Ω–µ –Ω–∞ —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞
app.post("/password-reset-request", (req, res) => {
  const { email } = req.body;

  db.findUserByEmail(email, (err, result) => {
    if (err) return res.status(400).json({ error: err.message });
    if (result.length === 0)
      return res
        .status(400)
        .json({ error: "–ù–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å!" });

    const user = result[0];
    const token = jwt.sign({ id: user.id }, SECRET_KEY, {
      expiresIn: "15m"
    });

    // Create a reset link
    const resetLink = `https://artcompass.noit.eu/resetpassword/resetcover/${token}`;

    const mailOptions = {
      from: EMAIL_USER,
      to: email,
      subject: "–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ –∑–∞ –õ–µ–Ω—Ç–∞ –Ω–∞ —É–º–∞ (MindReel)",
      html: `<p>–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ <a href="${resetLink}">—Ç—É–∫</a>, –∑–∞ –¥–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞ —Å–∏.</p>`
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error)
        return res
          .status(500)
          .json({ error: "–ù–µ —É—Å–ø—è—Ö–º–µ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏–º –∏–º–µ–π–ª :(" });
      res.json({
        message: "–ó–∞—è–≤–∫–∞—Ç–∞ –∑–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞ –Ω–∞ –≤–∞—à–∏—è –∏–º–µ–π–ª!"
      });
    });
  });
});

// –°–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞
app.post("/password-reset", (req, res) => {
  const { token, newPassword } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(400).json({ error: "Invalid or expired token" });

    const userId = decoded.id;

    // Hash the new password
    const salt = bcrypt.genSaltSync(10);
    const hashedPassword = bcrypt.hashSync(newPassword, salt);

    db.updateUserPassword(userId, hashedPassword, (err, result) => {
      if (err) return res.status(400).json({ error: err.message });
      res.json({ message: "–£—Å–ø–µ—à–Ω–æ –Ω—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞!" });
    });
  });
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ JWT Token
app.post("/token-validation", (req, res) => {
  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err) => {
    if (err) return res.json({ valid: false });
    res.json({ valid: true });
  });
});

// –í–∑–∏–º–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
app.get("/user-data", (req, res) => {
  const token = req.headers.authorization?.split(" ")[1]; // –í–∑–∏–º–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç authorization header-–∞

  if (!token) {
    return res.status(401).json({ error: "Token not provided" });
  }

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });

    const userId = decoded.id;

    db.getUserById(userId, (err, result) => {
      if (err) return res.status(500).json({ error: "Database query error" });
      if (result.length === 0)
        return res
          .status(404)
          .json({ error: "–ù–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å!" });

      const user = result[0];
      res.json(user);
    });
  });
});

// –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è
app.post("/save-preferences", (req, res) => {
  const { preferencesType, preferences } = req.body;

  if (!preferencesType || !preferences) {
    return res
      .status(400)
      .json({ error: "Preferences type and preferences are required" });
  }

  const { token, ...data } = preferences;
  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –≤–∑–µ–º–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ—Ç–æ ID
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) {
      console.log(err);
      return res.status(401).json({ error: "Invalid token" });
    }

    const userId = decoded.id;
    if (preferencesType === "movies_series") {
      db.saveMoviesSeriesUserPreferences(userId, data, (err, result) => {
        if (err) {
          return res.status(500).json({ error: err.message });
        }
        res.status(201).json({
          message: "User preferences for movies/series saved successfully!"
        });
      });
    } else {
      db.saveBooksUserPreferences(userId, data, (err, result) => {
        if (err) {
          return res.status(500).json({ error: err.message });
        }
        res
          .status(201)
          .json({ message: "User preferences for books saved successfully!" });
      });
    }
  });
});

// –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞
app.post("/save-recommendation", (req, res) => {
  const { recommendationType, recommendation } = req.body;

  if (!recommendationType || !recommendation) {
    return res
      .status(400)
      .json({ error: "Recommendation type and recommendation are required" });
  }

  const { token, ...data } = recommendation;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    if (recommendationType === "movies_series") {
      db.saveMovieSeriesRecommendation(userId, data, (err, result) => {
        if (err) {
          return res.status(500).json({ error: err.message });
        }
        res.status(201).json({
          message: "Movie/series recommendation added successfully!"
        });
      });
    } else {
      db.saveBookRecommendation(userId, data, (err, result) => {
        if (err) {
          return res.status(500).json({ error: err.message });
        }
        res.status(201).json({
          message: "Book recommendation added successfully!"
        });
      });
    }
  });
});

// –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞ –≤ —Å–ø–∏—Å—ä–∫ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ
app.post("/save-to-list", (req, res) => {
  const { recommendationType, recommendation } = req.body;

  if (!recommendationType || !recommendation) {
    return res
      .status(400)
      .json({ error: "Recommendation type and recommendation are required" });
  }

  const { token, ...data } = recommendation;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    if (recommendationType === "movies_series") {
      db.saveToWatchlist(userId, data, (err, result) => {
        if (err) {
          return res.status(500).json({ error: err.message });
        }
        res
          .status(201)
          .json({ message: "Movie/Series recommendation added successfully!" });
      });
    } else {
      db.saveToReadlist(userId, data, (err, result) => {
        if (err) {
          return res.status(500).json({ error: err.message });
        }
        res
          .status(201)
          .json({ message: "Book recommendation added successfully!" });
      });
    }
  });
});

// –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞ –æ—Ç —Å–ø–∏—Å—ä–∫–∞ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ
app.delete("/remove-from-list", (req, res) => {
  const { token, imdbID, source, book_id, recommendationType } = req.body;

  if (!token) {
    return res.status(401).json({ error: "Token is required" });
  }

  if (!recommendationType) {
    return res.status(400).json({ error: "Recommendation type is required" });
  }

  if (recommendationType === "movies_series" && !imdbID) {
    return res.status(400).json({ error: "IMDb ID is required for movies" });
  }

  if (recommendationType === "books" && !book_id) {
    return res.status(400).json({ error: "Book ID is required for books" });
  }

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;

    if (recommendationType === "movies_series") {
      db.removeFromWatchlist(userId, imdbID, (err, result) => {
        if (err) {
          return res.status(500).json({ error: err.message });
        }
        if (result.affectedRows === 0) {
          return res
            .status(404)
            .json({ error: "Movie/Series recommendation not found" });
        }
        res.status(200).json({
          message: "Movie/Series recommendation removed successfully!"
        });
      });
    } else {
      db.removeFromReadlist(userId, source, book_id, (err, result) => {
        if (err) {
          return res.status(500).json({ error: err.message });
        }
        if (result.affectedRows === 0) {
          return res
            .status(404)
            .json({ error: "Book recommendation not found" });
        }
        res
          .status(200)
          .json({ message: "Book recommendation removed successfully!" });
      });
    }
  });
});

// –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞ –æ—Ç —Å–ø–∏—Å—ä–∫–∞ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ
app.post("/check-for-recommendation-in-list", (req, res) => {
  const { token, imdbID, source, book_id, recommendationType } = req.body;

  if (!token) {
    return res.status(401).json({ error: "Token is required" });
  }

  if (!recommendationType) {
    return res.status(400).json({ error: "Recommendation type is required" });
  }

  if (recommendationType === "movies_series" && !imdbID) {
    return res.status(400).json({ error: "IMDb ID is required for movies" });
  }

  if (recommendationType === "books" && !book_id) {
    return res.status(400).json({ error: "Book ID is required for books" });
  }

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) {
      return res.status(401).json({ error: "Invalid token" });
    }

    const userId = decoded.id;

    if (recommendationType === "movies_series") {
      db.checkRecommendationExistsInWatchlist(
        userId,
        imdbID,
        (error, results) => {
          if (error) {
            return res
              .status(500)
              .json({ error: "Database error", details: error });
          }

          // Always respond with 200 and include the 'exists' flag
          return res.status(200).json({ exists: results.length > 0 });
        }
      );
    } else {
      db.checkRecommendationExistsInReadlist(
        userId,
        source,
        book_id,
        (error, results) => {
          if (error) {
            return res
              .status(500)
              .json({ error: "Database error", details: error });
          }

          // Always respond with 200 and include the 'exists' flag
          return res.status(200).json({ exists: results.length > 0 });
        }
      );
    }
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –æ–±—â –±—Ä–æ–π –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/users-count", (req, res) => {
  console.log("--Landing--");
  db.getUsersCount((err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching users count" });
    }
    console.log("--Landing--");
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Å—Ä–µ–¥–Ω–∞ –ø–µ—á–∞–ª–±–∞ –Ω–∞ —Ñ–∏–ª–º–∏/—Å–µ—Ä–∏–∞–ª–∏ –æ—Ç –±–∏–ª–µ—Ç–∏ –∏ –º–µ—Ç–∞/–∏–ºdb –æ—Ü–µ–Ω–∫–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/average-scores", (req, res) => {
  db.getAverageBoxOfficeAndScores((err, result) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "Error fetching average box office and ratings" });
    }
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ —Ñ–∏–ª–º–∏/—Å–µ—Ä–∏–∞–ª–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/top-recommendations", (req, res) => {
  db.getTopRecommendationsPlatform((err, result) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "Error fetching top recommendations" });
    }
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –¥—ä—Ä–∂–∞–≤–∏, –∫–æ–∏—Ç–æ —Å—ä–∑–¥–∞–≤–∞—Ç —Ñ–∏–ª–º–∏/—Å–µ—Ä–∏–∞–ª–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/top-countries", async (req, res) => {
  const limit = parseInt(req.query.limit) || 10;
  console.log("--–¢–æ–ø –¥—ä—Ä–∂–∞–≤–∏--");

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  db.getTopCountries(limit, (err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching top countries" });
    }
    console.log("--–¢–æ–ø –¥—ä—Ä–∂–∞–≤–∏--");
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –∂–∞–Ω—Ä–æ–≤–µ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/top-genres", async (req, res) => {
  const limit = parseInt(req.query.limit) || 10;

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  db.getTopGenres(limit, (err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching top genres" });
    }
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø–æ–ø—É–ª—è—Ä–Ω–∏ –∂–∞–Ω—Ä–æ–≤–µ –≤—ä–≤ –≤—Ä–µ–º–µ—Ç–æ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/genre-popularity-over-time", async (req, res) => {
  console.log("--–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç –Ω–∞ –∂–∞–Ω—Ä–æ–≤–µ—Ç–µ –≤—ä–≤ –≤—Ä–µ–º–µ—Ç–æ--");
  db.getGenrePopularityOverTime((err, result) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "Error fetching genre popularity over time" });
    }
    console.log("--–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç –Ω–∞ –∂–∞–Ω—Ä–æ–≤–µ—Ç–µ –≤—ä–≤ –≤—Ä–µ–º–µ—Ç–æ--");
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –∞–∫—Ç—å–æ—Ä–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/top-actors", async (req, res) => {
  const limit = parseInt(req.query.limit) || 10;
  console.log("--–¢–æ–ø –ø—Ä–µ–ø–æ—Ä—ä–∫–∏--");

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  db.getTopActors(limit, (err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching top actors" });
    }
    console.log("--–¢–æ–ø –ø—Ä–µ–ø–æ—Ä—ä–∫–∏--");
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ —Ñ–∏–ª–º–æ–≤–∏ —Ä–µ–∂–∏—Å—å–æ—Ä–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/top-directors", async (req, res) => {
  const limit = parseInt(req.query.limit) || 10;

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  db.getTopDirectors(limit, (err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching top directors" });
    }
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/top-writers", async (req, res) => {
  const limit = parseInt(req.query.limit) || 10;

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  db.getTopWriters(limit, (err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching top writers" });
    }
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–≥—Ä–∞–¥–∏ –æ—Å–∫–∞—Ä –∑–∞ –≤—Å–µ–∫–∏ —Ñ–∏–ª–º/—Å–µ—Ä–∏–∞–ª –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/oscars-by-movie", async (req, res) => {
  db.getOscarsByMovie((err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching oscars" });
    }
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –≤—Å–∏—á–∫–∏ –Ω–∞–≥—Ä–∞–¥–∏ –∑–∞ –≤—Å–µ–∫–∏ —Ñ–∏–ª–º/—Å–µ—Ä–∏–∞–ª –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/total-awards-by-movie", async (req, res) => {
  db.getTotalAwardsByMovieOrSeries((err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching total awards" });
    }
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –æ–±—â –±—Ä–æ–π –Ω–∞ –Ω–∞–≥—Ä–∞–¥–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.get("/stats/platform/total-awards", async (req, res) => {
  db.getTotalAwardsCount((err, result) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "Error fetching total awards count" });
    }
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Ñ–∏–ª–º–æ–≤–∏ —Ä–µ–∂–∏—Å—å–æ—Ä–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç
app.get("/stats/platform/sorted-directors-by-prosperity", async (req, res) => {
  console.log("--–ê–∫—Ç—å–æ—Ä–∏, —Ä–µ–∂–∏—Å—å–æ—Ä–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∏ –ø–æ –ü—Ä–æ—Å–ø–µ—Ä–∏—Ç–µ—Ç--");
  db.getSortedDirectorsByProsperity((err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching sorted directors" });
    }
    console.log("--–ê–∫—Ç—å–æ—Ä–∏, —Ä–µ–∂–∏—Å—å–æ—Ä–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∏ –ø–æ –ü—Ä–æ—Å–ø–µ—Ä–∏—Ç–µ—Ç--");
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∞–∫—Ç—å–æ—Ä–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç
app.get("/stats/platform/sorted-actors-by-prosperity", async (req, res) => {
  db.getSortedActorsByProsperity((err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching sorted actors" });
    }
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç
app.get("/stats/platform/sorted-writers-by-prosperity", async (req, res) => {
  db.getSortedWritersByProsperity((err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching sorted writers" });
    }
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Ñ–∏–ª–º–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç
app.get("/stats/platform/sorted-movies-by-prosperity", async (req, res) => {
  console.log("--–ù–∞–π-—É—Å–ø–µ—à–Ω–∏ —Ñ–∏–ª–º–∏ –ø–æ –ü—Ä–æ—Å–ø–µ—Ä–∏—Ç–µ—Ç, IMDb –†–µ–π—Ç–∏–Ω–≥ –∏ –ë–æ–∫—Å–æ—Ñ–∏—Å--");
  db.getSortedMoviesByProsperity((err, result) => {
    if (err) {
      return res.status(500).json({ error: "Error fetching sorted movies" });
    }
    console.log(
      "--–ù–∞–π-—É—Å–ø–µ—à–Ω–∏ —Ñ–∏–ª–º–∏ –ø–æ –ü—Ä–æ—Å–ø–µ—Ä–∏—Ç–µ—Ç, IMDb –†–µ–π—Ç–∏–Ω–≥ –∏ –ë–æ–∫—Å–æ—Ñ–∏—Å--"
    );
    res.json(result);
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Ñ–∏–ª–º–∏ –∏ —Å–µ—Ä–∏–∞–ª–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ meta score
app.get(
  "/stats/platform/sorted-movies-and-series-by-metascore",
  async (req, res) => {
    const limit = parseInt(req.query.limit) || 10;
    console.log("--–§–∏–ª–º–∏ –∏ —Å–µ—Ä–∏–∞–ª–∏ –ø–æ –æ—Ü–µ–Ω–∫–∏--");

    if (limit <= 0) {
      return res
        .status(400)
        .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
    }

    db.getTopMoviesAndSeriesByMetascore(limit, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching sorted movies by meta score" });
      }
      console.log("--–§–∏–ª–º–∏ –∏ —Å–µ—Ä–∏–∞–ª–∏ –ø–æ –æ—Ü–µ–Ω–∫–∏--");
      res.json(result);
    });
  }
);

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Ñ–∏–ª–º–∏ –∏ —Å–µ—Ä–∏–∞–ª–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ IMDb rating
app.get(
  "/stats/platform/sorted-movies-and-series-by-imdb-rating",
  async (req, res) => {
    const limit = parseInt(req.query.limit) || 10;

    if (limit <= 0) {
      return res
        .status(400)
        .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
    }

    db.getTopMoviesAndSeriesByIMDbRating(limit, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching sorted movies by IMDb rating" });
      }
      res.json(result);
    });
  }
);

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Ñ–∏–ª–º–∏ –∏ —Å–µ—Ä–∏–∞–ª–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ rotten tomatoes rating
app.get(
  "/stats/platform/sorted-movies-and-series-by-rotten-tomatoes-rating",
  async (req, res) => {
    const limit = parseInt(req.query.limit) || 10;

    if (limit <= 0) {
      return res
        .status(400)
        .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
    }

    db.getTopMoviesAndSeriesByRottenTomatoesRating(limit, (err, result) => {
      if (err) {
        return res.status(500).json({
          error: "Error fetching sorted movies by rotten tomatoes rating"
        });
      }
      res.json(result);
    });
  }
);

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ —Ñ–∏–ª–º–∏/—Å–µ—Ä–∏–∞–ª–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/top-recommendations", (req, res) => {
  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersTopRecommendations(userId, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching top recommendations" });
      }
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Ñ–∏–ª–º–∏/—Å–µ—Ä–∏–∞–ª–∏ –≤ —Å–ø–∏—Å—ä–∫ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/watchlist", (req, res) => {
  const { token } = req.body;
  console.log("--–°–ø–∏—Å—ä–∫ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ--");

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersWatchlist(userId, (err, result) => {
      if (err) {
        return res.status(500).json({ error: "Error fetching watchlist" });
      }
      console.log("--–°–ø–∏—Å—ä–∫ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ--");
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å—ä–∫ –∑–∞ —á–µ—Ç–µ–Ω–µ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/readlist", (req, res) => {
  const { token } = req.body;
  console.log("--–°–ø–∏—Å—ä–∫ –∑–∞ —á–µ—Ç–µ–Ω–µ--");

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersReadlist(userId, (err, result) => {
      if (err) {
        return res.status(500).json({ error: "Error fetching readlist" });
      }
      console.log("--–°–ø–∏—Å—ä–∫ –∑–∞ —á–µ—Ç–µ–Ω–µ--");
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –∂–∞–Ω—Ä–æ–≤–µ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/top-genres", (req, res) => {
  const limit = parseInt(req.query.limit) || 10;
  console.log("--–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏--");

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersTopGenres(userId, limit, (err, result) => {
      if (err) {
        return res.status(500).json({ error: "Error fetching top genres" });
      }
      console.log("--–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏--");
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–∑–∞–ø–∞–∑–≤–∞–Ω–∏ –≤ —Å–ø–∏—Å—ä–∫ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ –∂–∞–Ω—Ä–æ–≤–µ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/watchlist-top-genres", (req, res) => {
  const limit = parseInt(req.query.limit) || 10;

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersTopGenresFromWatchlist(userId, limit, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching top genres from watchlist" });
      }
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –∞–∫—Ç—å–æ—Ä–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/top-actors", (req, res) => {
  const limit = parseInt(req.query.limit) || 10;

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersTopActors(userId, limit, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching users top actors" });
      }
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–∑–∞–ø–∞–∑–≤–∞–Ω–∏ –≤ —Å–ø–∏—Å—ä–∫ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ –∞–∫—Ç—å–æ—Ä–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/watchlist-top-actors", (req, res) => {
  const limit = parseInt(req.query.limit) || 10;

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersTopActorsFromWatchlist(userId, limit, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching users watchlist top actors" });
      }
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ —Ä–µ–∂–∏—Å—å–æ—Ä–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/top-directors", (req, res) => {
  const limit = parseInt(req.query.limit) || 10;

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersTopDirectors(userId, limit, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching users top directors" });
      }
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–∑–∞–ø–∞–∑–≤–∞–Ω–∏ –≤ —Å–ø–∏—Å—ä–∫ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ —Ä–µ–∂–∏—Å—å–æ—Ä–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/watchlist-top-directors", (req, res) => {
  const limit = parseInt(req.query.limit) || 10;

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersTopDirectorsFromWatchlist(userId, limit, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching users watchlist top directors" });
      }
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/top-writers", (req, res) => {
  const limit = parseInt(req.query.limit) || 10;

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersTopWriters(userId, limit, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching users top writers" });
      }
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –Ω–∞–π-–∑–∞–ø–∞–∑–≤–∞–Ω–∏ –≤ —Å–ø–∏—Å—ä–∫ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/watchlist-top-writers", (req, res) => {
  const limit = parseInt(req.query.limit) || 10;

  if (limit <= 0) {
    return res
      .status(400)
      .json({ error: "–õ–∏–º–∏—Ç—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ." });
  }

  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    db.getUsersTopWritersFromWatchlist(userId, limit, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching users watchlist top writers" });
      }
      res.json(result);
    });
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∫–Ω–∏–≥–∞ –æ—Ç Goodreads
app.get("/get-goodreads-data-for-a-book", (req, res) => {
  const { url } = req.query;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –µ –ø–æ–¥–∞–¥–µ–Ω URL –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –≤ –∑–∞—è–≤–∫–∞—Ç–∞
  if (!url) {
    return res.status(400).send("–ì—Ä–µ—à–∫–∞: URL –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º.");
  }

  // –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ Python –ø—Ä–æ—Ü–µ—Å –∏ –ø–æ–¥–∞–≤–∞–Ω–µ –Ω–∞ URL –∫–∞—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç
  const pythonProcess = spawn(pythonPathLocal, ["./python/scraper.py", url]);

  let response = "";

  // –£–ª–∞–≤—è–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è –∏–∑—Ö–æ–¥ (stdout)
  pythonProcess.stdout.on("data", (data) => {
    response += data.toString();
  });

  // –£–ª–∞–≤—è–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∏ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è –∏–∑—Ö–æ–¥ –∑–∞ –≥—Ä–µ—à–∫–∏ (stderr) - –ø–æ –∏–∑–±–æ—Ä –∑–∞ –¥–µ–±—ä–≥–≤–∞–Ω–µ
  pythonProcess.stderr.on("data", (data) => {
    console.error("Python —Å–∫—Ä–∏–ø—Ç stderr:", data.toString());
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–æ—Ü–µ—Å–∞
  pythonProcess.on("close", (code) => {
    if (code === 0) {
      const jsonResponse = JSON.parse(response.trim());
      res.status(200).json(jsonResponse); // –í—Ä—ä—â–∞ JSON –æ—Ç–≥–æ–≤–æ—Ä –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    } else {
      res.status(500).send("–ì—Ä–µ—à–∫–∞: –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ Python —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ");
    }
  });
});

// –í–∑–µ–º–∞–Ω–µ –Ω–∞ JSON –æ–±–µ–∫—Ç –∑–∞ –∫–Ω–∏–≥–∞ –æ—Ç Goodreads
app.get("/get-goodreads-json-object-for-a-book", (req, res) => {
  const { url } = req.query;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –µ –ø–æ–¥–∞–¥–µ–Ω URL –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –≤ –∑–∞—è–≤–∫–∞—Ç–∞
  if (!url) {
    return res.status(400).send("–ì—Ä–µ—à–∫–∞: URL –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º.");
  }

  // –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ Python –ø—Ä–æ—Ü–µ—Å –∏ –ø–æ–¥–∞–≤–∞–Ω–µ –Ω–∞ URL –∫–∞—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç
  const pythonProcess = spawn(pythonPathLocal, [
    "./python/scraper_script_tag_json.py",
    url
  ]);

  let response = "";

  // –£–ª–∞–≤—è–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è –∏–∑—Ö–æ–¥ (stdout)
  pythonProcess.stdout.on("data", (data) => {
    response += data.toString();
  });

  // –£–ª–∞–≤—è–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∏ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è –∏–∑—Ö–æ–¥ –∑–∞ –≥—Ä–µ—à–∫–∏ (stderr) - –ø–æ –∏–∑–±–æ—Ä –∑–∞ –¥–µ–±—ä–≥–≤–∞–Ω–µ
  pythonProcess.stderr.on("data", (data) => {
    console.error("Python —Å–∫—Ä–∏–ø—Ç stderr:", data.toString());
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–æ—Ü–µ—Å–∞
  pythonProcess.on("close", (code) => {
    if (code === 0) {
      const jsonResponse = JSON.parse(response.trim());
      res.status(200).json(jsonResponse); // –í—Ä—ä—â–∞ JSON –æ—Ç–≥–æ–≤–æ—Ä –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    } else {
      res.status(500).send("–ì—Ä–µ—à–∫–∞: –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ Python —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ");
    }
  });
});

// –î–æ—Å—Ç—ä–ø–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ä–µ—Ç–µ–Ω AI –º–æ–¥–µ–ª
app.post("/get-model-response", (req, res) => {
  const {
    messages,
    provider = "openai",
    modelOpenAI = "gpt-4o",
    api_key
  } = req.body;

  if (!messages || !Array.isArray(messages)) {
    return res
      .status(400)
      .json({ error: "Invalid request. 'messages' must be an array." });
  }

  // Spawn the Python process
  const pythonProcess = spawn(pythonPathLocal, [
    "./python/fetch_ai_response.py"
  ]);

  let response = "";

  // Send messages as JSON to Python via stdin
  pythonProcess.stdin.write(
    JSON.stringify({ provider, messages, modelOpenAI, api_key })
  );
  pythonProcess.stdin.end(); // Close the input stream

  // Capture output from stdout
  pythonProcess.stdout.on("data", (data) => {
    response += data.toString();
  });

  // Capture error output from stderr (for debugging)
  pythonProcess.stderr.on("data", (data) => {
    console.error("Python script stderr:", data.toString());
  });

  // Handle the closing of the Python process
  pythonProcess.on("close", (code) => {
    if (code === 0) {
      try {
        const jsonResponse = JSON.parse(response.trim());
        res.status(200).json(jsonResponse); // Return JSON to the client
      } catch (e) {
        console.error("Error parsing JSON response:", e);
        res.status(500).send("Error parsing response from Python");
      }
    } else {
      res.status(500).send("Error: Python script execution failed");
    }
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –¥–∞–¥–µ–Ω —Ñ–∏–ª–º/—Å–µ—Ä–∏–∞–ª –µ –ø–æ–¥—Ö–æ–¥—è—â –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è
app.post("/check-relevance", (req, res) => {
  const { userPreferences, recommendations } = req.body;

  if (!userPreferences || !recommendations) {
    return res.status(400).json({
      error: "Missing userPreferences object or recommendations array"
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å—è–∫–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞ –∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—Ç–∞
  const relevanceResults = recommendations.map((recommendation) => {
    const relevance = hf.checkRelevance(userPreferences, recommendation);

    return {
      imdbID: recommendation.imdbID,
      title_en: recommendation.title_en,
      title_bg: recommendation.title_bg,
      ...relevance
    };
  });

  // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –∫–∞—Ç–æ JSON
  res.json(relevanceResults);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –¥–∞–¥–µ–Ω —Ñ–∏–ª–º/—Å–µ—Ä–∏–∞–ª –µ –ø–æ–¥—Ö–æ–¥—è—â –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è - AI –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.post("/check-relevance-for-last-saved-recommendations", (req, res) => {
  const { token } = req.body;
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;

    db.getLastUserPreferences(userId, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error fetching last saved user recommendations." });
      }
      if (!result) {
        return res.json({
          message: "No user preferences found.",
          lastSavedUserPreferences: null,
          lastSavedRecommendations: [],
          relevanceResults: []
        });
      }
      db.getLastGeneratedMoviesSeriesRecommendations(
        userId,
        result.date,
        (err, recommendationsResult) => {
          if (err) {
            return res.status(500).json({
              error:
                "Error fetching last generated movies series recommendations."
            });
          }
          // –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å—è–∫–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞ –∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—Ç–∞
          const relevanceResults = recommendationsResult.map(
            (recommendation) => {
              const relevance = hf.checkRelevance(result, recommendation);

              return {
                imdbID: recommendation.imdbID,
                title_en: recommendation.title_en,
                title_bg: recommendation.title_bg,
                ...relevance
              };
            }
          );

          // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –∫–∞—Ç–æ JSON
          res.json({
            lastSavedUserPreferences: result,
            lastSavedRecommendations: recommendationsResult,
            relevanceResults: relevanceResults
          });
        }
      );
    });
  });
});

// –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ Precision –Ω–∞ —Ç–µ–∫—É—â–æ—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ
app.post("/save-analysis", (req, res) => {
  const { token } = req.body;
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;

    db.saveAnalysis(userId, req.body, (err) => {
      if (err) return res.status(500).json({ error: "Error saving analysis." });

      res
        .status(201)
        .json({ message: "AI Precision Analysis saved successfully!" });
    });
  });
});

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏
app.get("/stats/platform/ai/average-metrics", (req, res) => {
  // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ precision, recall –∏ F1 score
  db.calculateAverageMetrics((err, result) => {
    if (err)
      return res
        .status(500)
        .json({ error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏—Ç–µ." });
    // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –∫–∞—Ç–æ JSON –æ—Ç–≥–æ–≤–æ—Ä
    res.status(200).json(result);
  });
});

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –¥–Ω–∏
app.get("/stats/platform/ai/historical-average-metrics", (req, res) => {
  // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ precision, recall –∏ F1 score –ø–æ –¥–Ω–∏
  db.getHistoricalAverageMetrics((err, result) => {
    if (err)
      return res
        .status(500)
        .json({ error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏—Ç–µ –ø–æ –¥–Ω–∏." });
    // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –∫–∞—Ç–æ JSON –æ—Ç–≥–æ–≤–æ—Ä
    res.status(200).json(result);
  });
});

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –¥–Ω–∏ –∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/ai/historical-average-metrics", (req, res) => {
  const { token } = req.body;

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;
    // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ precision, recall –∏ F1 score –ø–æ –¥–Ω–∏ –∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    db.getHistoricalAverageMetricsForUser(userId, (err, result) => {
      if (err)
        return res
          .status(500)
          .json({ error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏—Ç–µ –ø–æ –¥–Ω–∏." });
      // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –∫–∞—Ç–æ JSON –æ—Ç–≥–æ–≤–æ—Ä
      res.status(200).json(result);
    });
  });
});

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Precision –Ω–∞ –±–∞–∑–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏, –ø—Ä–∞–≤–µ–Ω–∏ –Ω—è–∫–æ–≥–∞ –∑–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.post("/stats/individual/ai/precision-total", (req, res) => {
  const { token, userPreferences } = req.body;
  console.log("AI –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ª–∏–ø—Å–≤–∞ –æ–±–µ–∫—Ç—ä—Ç —Å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
  if (!userPreferences) {
    return res.status(400).json({
      error: "Missing userPreferences object"
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ —Ç–æ–∫–µ–Ω–∞
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;

    // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –æ—Ç –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
    db.getAllUsersDistinctRecommendations(userId, (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error retrieving user recommendations" });
      }

      const total_recommendations_count = result.total_count; // –û–±—â–∏—è—Ç –±—Ä–æ–π –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
      const recommendations = result.recommendations; // –ú–∞—Å–∏–≤ —Å –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
      let relevant_recommendations_count = 0; // –ë—Ä–æ—è—Ç –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª, –∫–æ–∏—Ç–æ —Å–∞ –º—É –ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –Ω–∞ –Ω–µ–≥–æ

      // –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å—è–∫–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞ –∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—Ç–∞
      recommendations.map((recommendation) => {
        const relevance = hf.checkRelevance(userPreferences, recommendation);

        // –£–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ –±—Ä–æ—è –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏, –∞–∫–æ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞—Ç–∞ –µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
        if (relevance.isRelevant === true) {
          relevant_recommendations_count++;
        }

        return {
          imdbID: recommendation.imdbID,
          ...relevance
        };
      });

      // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Precision (–∑–∞–∫—Ä—ä–≥–ª—è–Ω–µ –∏ –Ω–∞ –¥–≤–µ—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –¥–æ 16 –∑–Ω–∞–∫–∞ —Å–ª–µ–¥ –¥–µ—Å–µ—Ç–∏—á–Ω–∞—Ç–∞ –∑–∞–ø–µ—Ç–∞—è –∏ —Å—Ä–∞–≤–Ω—è–≤–∞–Ω–µ)
      const precision_exact =
        total_recommendations_count > 0
          ? Math.round(
              (relevant_recommendations_count / total_recommendations_count) *
                Math.pow(10, 16)
            ) / Math.pow(10, 16)
          : 0;

      const precision_fixed = parseFloat(precision_exact.toFixed(2)); // –ó–∞–∫—Ä—ä–≥–ª–µ–Ω–∞ –¥–æ 2 –∑–Ω–∞–∫–∞
      const precision_percentage = parseFloat(
        (precision_exact * 100).toFixed(2)
      ); // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—è–Ω–µ

      // –°—ä—Ö—Ä–∞–Ω—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
      db.savePrecision(
        userId,
        "precision",
        {
          precision_exact,
          precision_fixed,
          precision_percentage,
          relevant_recommendations_count,
          total_recommendations_count
        },
        (err) => {
          if (err) {
            return res
              .status(500)
              .json({ error: "Error saving AI precision stats" });
          }

          console.log("AI –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä");
          // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –∫–∞—Ç–æ JSON
          res.json({
            precision_exact,
            precision_fixed,
            precision_percentage,
            relevant_recommendations_count,
            total_recommendations_count
          });
        }
      );
    });
  });
});

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Recall –Ω–∞ –±–∞–∑–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏, –ø—Ä–∞–≤–µ–Ω–∏ –Ω—è–∫–æ–≥–∞ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.post("/stats/individual/ai/recall-total", (req, res) => {
  const { token, userPreferences } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ª–∏–ø—Å–≤–∞ –æ–±–µ–∫—Ç—ä—Ç —Å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
  if (!userPreferences) {
    return res.status(400).json({
      error: "Missing userPreferences object"
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ —Ç–æ–∫–µ–Ω–∞
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;

    // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ –æ—Ç –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
    db.getAllPlatformDistinctRecommendations((err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error retrieving recommendations" });
      }

      const total_platform_recommendations_count = result.total_count; // –û–±—â–∏—è—Ç –±—Ä–æ–π –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –≤ —Ü—è–ª–∞—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
      const recommendations = result.recommendations; // –ú–∞—Å–∏–≤ —Å –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –≤ —Ü—è–ª–∞—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
      let relevant_platform_recommendations_count = 0; // –ë—Ä–æ—è—Ç –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –≤ —Ü—è–ª–∞—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –¥–∞–ª–∏ —Ç–µ —Å–∞ –º—É –ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –Ω–∞ –Ω–µ–≥–æ –∏–ª–∏ –Ω–µ

      // –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å—è–∫–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞ –∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—Ç–∞
      recommendations.forEach((recommendation) => {
        const relevance = hf.checkRelevance(userPreferences, recommendation);

        // –£–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ –±—Ä–æ—è –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏, –∞–∫–æ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞—Ç–∞ –µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
        if (relevance.isRelevant) {
          relevant_platform_recommendations_count++;
        }
      });

      // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –æ—Ç –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
      db.getAllUsersDistinctRecommendations(userId, (err, userResult) => {
        if (err) {
          return res
            .status(500)
            .json({ error: "Error retrieving user recommendations" });
        }

        const total_user_recommendations_count = userResult.total_count; // –û–±—â–∏—è—Ç –±—Ä–æ–π –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
        const userRecommendations = userResult.recommendations; // –ú–∞—Å–∏–≤ —Å –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
        let relevant_user_recommendations_count = 0; // –ë—Ä–æ—è—Ç –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª, –∫–æ–∏—Ç–æ —Å–∞ –º—É –ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –Ω–∞ –Ω–µ–≥–æ

        // –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å—è–∫–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞ –∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—Ç–∞
        userRecommendations.map((recommendation) => {
          const relevance = hf.checkRelevance(userPreferences, recommendation);

          // –£–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ –±—Ä–æ—è –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏, –∞–∫–æ –ø—Ä–µ–ø–æ—Ä—ä–∫–∞—Ç–∞ –µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
          if (relevance.isRelevant === true) {
            relevant_user_recommendations_count++;
          }
        });

        // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Recall - –ë—Ä–æ—è—Ç –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª, –∫–æ–∏—Ç–æ —Å–∞ –º—É –ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –Ω–∞ –Ω–µ–≥–æ (True Positives - TP) / –ë—Ä–æ—è—Ç –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –≤ —Ü—è–ª–∞—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –¥–∞–ª–∏ —Ç–µ —Å–∞ –º—É –ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –Ω–∞ –Ω–µ–≥–æ –∏–ª–∏ –Ω–µ (True Positives + False Negatives -> TP + FN)
        // (–∑–∞–∫—Ä—ä–≥–ª—è–Ω–µ –∏ –Ω–∞ –¥–≤–µ—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –¥–æ 16 –∑–Ω–∞–∫–∞ —Å–ª–µ–¥ –¥–µ—Å–µ—Ç–∏—á–Ω–∞—Ç–∞ –∑–∞–ø–µ—Ç–∞—è –∏ —Å—Ä–∞–≤–Ω—è–≤–∞–Ω–µ)
        const recall_exact =
          relevant_platform_recommendations_count > 0
            ? Math.round(
                (relevant_user_recommendations_count /
                  relevant_platform_recommendations_count) *
                  Math.pow(10, 16)
              ) / Math.pow(10, 16)
            : 0;

        const recall_fixed = parseFloat(recall_exact.toFixed(2)); // –ó–∞–∫—Ä—ä–≥–ª–µ–Ω–∞ –¥–æ 2 –∑–Ω–∞–∫–∞
        const recall_percentage = parseFloat((recall_exact * 100).toFixed(2)); // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—è–Ω–µ

        // –°—ä—Ö—Ä–∞–Ω—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        db.saveRecall(
          userId,
          "recall",
          {
            recall_exact,
            recall_fixed,
            recall_percentage,
            relevant_user_recommendations_count,
            relevant_platform_recommendations_count,
            total_user_recommendations_count,
            total_platform_recommendations_count
          },
          (err) => {
            if (err) {
              return res
                .status(500)
                .json({ error: "Error saving AI recall stats" });
            }
            // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –∫–∞—Ç–æ JSON
            res.json({
              recall_exact,
              recall_fixed,
              recall_percentage,
              relevant_user_recommendations_count,
              relevant_platform_recommendations_count,
              total_user_recommendations_count,
              total_platform_recommendations_count
            });
          }
        );
      });
    });
  });
});

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ F1-score –Ω–∞ –±–∞–∑–∞ Precision –∏ Recall
app.post("/stats/individual/ai/f1-score", (req, res) => {
  const { token, precision_exact, recall_exact } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ —Ç–æ–∫–µ–Ω–∞
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ª–∏–ø—Å–≤–∞—Ç –≤—Ö–æ–¥–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
    if (precision_exact === undefined || recall_exact === undefined) {
      return res.status(400).json({
        error: "Missing precision_exact or recall_exact"
      });
    }

    // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ F1 Score –ø–æ –æ–±—â–∞—Ç–∞ —Ñ–æ—Ä–º—É–ª–∞
    const f1_score =
      precision_exact + recall_exact === 0
        ? 0
        : (2 * precision_exact * recall_exact) /
          (precision_exact + recall_exact);

    // –ó–∞–∫—Ä—ä–≥–ª—è–Ω–µ –Ω–∞ F1 Score –¥–æ 16 –∑–Ω–∞–∫–∞ —Å–ª–µ–¥ –¥–µ—Å–µ—Ç–∏—á–Ω–∞—Ç–∞ –∑–∞–ø–µ—Ç–∞—è
    const f1_score_exact =
      Math.round(f1_score * Math.pow(10, 16)) / Math.pow(10, 16);

    const f1_score_fixed = parseFloat(f1_score_exact.toFixed(2)); // –ó–∞–∫—Ä—ä–≥–ª–µ–Ω–∞ –¥–æ 2 –∑–Ω–∞–∫–∞
    const f1_score_percentage = parseFloat((f1_score_exact * 100).toFixed(2)); // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—è–Ω–µ

    // –°—ä—Ö—Ä–∞–Ω—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
    db.saveF1Score(
      userId,
      "f1score",
      {
        f1_score_exact,
        f1_score_fixed,
        f1_score_percentage
      },
      (err) => {
        if (err) {
          return res
            .status(500)
            .json({ error: "Error saving AI f1 score stats" });
        }
        // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –∫–∞—Ç–æ JSON
        res.json({
          f1_score_exact,
          f1_score_fixed,
          f1_score_percentage
        });
      }
    );
  });
});

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Accuracy –Ω–∞ –±–∞–∑–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏, –ø—Ä–∞–≤–µ–Ω–∏ –Ω—è–∫–æ–≥–∞ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.post("/stats/individual/ai/accuracy-total", (req, res) => {
  const { token, userPreferences } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ª–∏–ø—Å–≤–∞ –æ–±–µ–∫—Ç—ä—Ç —Å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
  if (!userPreferences) {
    return res.status(400).json({
      error: "Missing userPreferences object"
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ —Ç–æ–∫–µ–Ω–∞
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;

    // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ –æ—Ç –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
    db.getAllPlatformDistinctRecommendations((err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error retrieving recommendations" });
      }

      const total_platform_recommendations_count = result.total_count; // (TP + FP + FN + TN) -> –û–±—â–∏—è—Ç –±—Ä–æ–π –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –≤ —Ü—è–ª–∞—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
      const recommendations = result.recommendations;
      let relevant_platform_recommendations_count = 0; // (TP + FN) -> –ë—Ä–æ—è—Ç –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –≤ —Ü—è–ª–∞—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –¥–∞–ª–∏ —Ç–µ —Å–∞ –º—É –ø—Ä–µ–ø–æ—Ä—ä—á–≤–∞–Ω–∏ –Ω–∞ –Ω–µ–≥–æ –∏–ª–∏ –Ω–µ

      // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
      recommendations.forEach((recommendation) => {
        const relevance = hf.checkRelevance(userPreferences, recommendation);
        if (relevance.isRelevant) {
          relevant_platform_recommendations_count++;
        }
      });

      // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –æ—Ç –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
      db.getAllUsersDistinctRecommendations(userId, (err, userResult) => {
        if (err) {
          return res
            .status(500)
            .json({ error: "Error retrieving user recommendations" });
        }

        const userRecommendations = userResult.recommendations;
        let user_recommendations_count = 0; // (TP + FP) -> –ë—Ä–æ—è—Ç –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏—Ç–µ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
        let relevant_user_recommendations_count = 0; // (TP)

        // –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—Ç–∞
        userRecommendations.forEach((recommendation) => {
          const relevance = hf.checkRelevance(userPreferences, recommendation);
          if (relevance.isRelevant) {
            relevant_user_recommendations_count++;
          }
          user_recommendations_count++;
        });

        // (TN + FN) -> –ë—Ä–æ—è—Ç –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏—Ç–µ, –∫–æ–∏—Ç–æ –Ω–µ —Å–∞ –±–∏–ª–∏ –ø—Ä–µ–ø–æ—Ä—ä—á–∞–Ω–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
        const non_given_recommendations_count =
          total_platform_recommendations_count - user_recommendations_count; // (TP + FP + TN + FN) - (TP + FP)

        // (FN) -> –ë—Ä–æ—è—Ç –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏—Ç–µ, –∫–æ–∏—Ç–æ —Å–∞ –±–∏–ª–∏ –ø—Ä–µ–ø–æ—Ä—ä—á–∞–Ω–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª, –Ω–æ –Ω–µ —Å–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏
        const relevant_non_given_recommendations_count =
          relevant_platform_recommendations_count -
          relevant_user_recommendations_count; // (TP + FN) - (TP)

        // (TN) -> –ë—Ä–æ—è—Ç –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏—Ç–µ, –∫–æ–∏—Ç–æ –Ω–µ —Å–∞ –±–∏–ª–∏ –ø—Ä–µ–ø–æ—Ä—ä—á–∞–Ω–∏ –Ω–∞ –¥–∞–¥–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∏ –Ω–µ —Å–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏
        const irrelevant_non_given_recommendations_count =
          non_given_recommendations_count -
          relevant_non_given_recommendations_count; // (TN + FN) - (FN)

        // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Accuracy - (TP + TN) / (TP + TN + FP + FN)
        const accuracy_exact =
          total_platform_recommendations_count > 0
            ? Math.round(
                ((relevant_user_recommendations_count +
                  irrelevant_non_given_recommendations_count) /
                  total_platform_recommendations_count) *
                  Math.pow(10, 16)
              ) / Math.pow(10, 16)
            : 0;

        const accuracy_fixed = parseFloat(accuracy_exact.toFixed(2));
        const accuracy_percentage = parseFloat(
          (accuracy_exact * 100).toFixed(2)
        );

        // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –∫–∞—Ç–æ JSON
        res.json({
          accuracy_exact,
          accuracy_fixed,
          accuracy_percentage,
          irrelevant_non_given_recommendations_count,
          relevant_non_given_recommendations_count,
          non_given_recommendations_count,
          relevant_user_recommendations_count,
          user_recommendations_count,
          relevant_platform_recommendations_count,
          total_platform_recommendations_count
        });
      });
    });
  });
});

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Specificity –Ω–∞ –±–∞–∑–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏, –ø—Ä–∞–≤–µ–Ω–∏ –Ω—è–∫–æ–≥–∞ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.post("/stats/individual/ai/specificity-total", (req, res) => {
  const { token, userPreferences } = req.body;

  if (!userPreferences) {
    return res.status(400).json({ error: "Missing userPreferences object" });
  }

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;

    db.getAllPlatformDistinctRecommendations((err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error retrieving recommendations" });
      }

      const total_platform_recommendations_count = result.total_count;
      const recommendations = result.recommendations;
      let irrelevant_platform_recommendations_count = 0; // (TN + FP)

      recommendations.forEach((recommendation) => {
        const relevance = hf.checkRelevance(userPreferences, recommendation);
        if (!relevance.isRelevant) {
          irrelevant_platform_recommendations_count++;
        }
      });

      db.getAllUsersDistinctRecommendations(userId, (err, userResult) => {
        if (err) {
          return res
            .status(500)
            .json({ error: "Error retrieving user recommendations" });
        }

        const userRecommendations = userResult.recommendations;
        let user_recommendations_count = 0; // (TP + FP)
        let irrelevant_user_recommendations_count = 0; // (FP)

        userRecommendations.forEach((recommendation) => {
          const relevance = hf.checkRelevance(userPreferences, recommendation);
          if (!relevance.isRelevant) {
            irrelevant_user_recommendations_count++;
          }
          user_recommendations_count++;
        });

        const non_given_recommendations_count =
          total_platform_recommendations_count - user_recommendations_count; // (TP + FP + TN + FN) - (TP + FP) = (TN + FN)
        const irrelevant_non_given_recommendations_count =
          irrelevant_platform_recommendations_count -
          irrelevant_user_recommendations_count; // (TN + FP) - (FP) = (TN)

        // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Specificity - TN / (TN + FP)
        const specificity_exact =
          irrelevant_platform_recommendations_count > 0
            ? Math.round(
                (irrelevant_non_given_recommendations_count /
                  irrelevant_platform_recommendations_count) *
                  Math.pow(10, 16)
              ) / Math.pow(10, 16)
            : 0;

        const specificity_fixed = parseFloat(specificity_exact.toFixed(2));
        const specificity_percentage = parseFloat(
          (specificity_exact * 100).toFixed(2)
        );

        res.json({
          specificity_exact,
          specificity_fixed,
          specificity_percentage,
          irrelevant_non_given_recommendations_count,
          non_given_recommendations_count,
          irrelevant_user_recommendations_count,
          user_recommendations_count,
          irrelevant_platform_recommendations_count,
          total_platform_recommendations_count
        });
      });
    });
  });
});

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ False Negative Rate –Ω–∞ –±–∞–∑–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏, –ø—Ä–∞–≤–µ–Ω–∏ –Ω—è–∫–æ–≥–∞ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.post("/stats/individual/ai/fnr-total", (req, res) => {
  const { token, userPreferences } = req.body;

  if (!userPreferences) {
    return res.status(400).json({ error: "Missing userPreferences object" });
  }

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;

    db.getAllPlatformDistinctRecommendations((err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error retrieving recommendations" });
      }

      const total_platform_recommendations_count = result.total_count;
      const recommendations = result.recommendations;
      let relevant_platform_recommendations_count = 0; // (FN + TP)

      recommendations.forEach((recommendation) => {
        const relevance = hf.checkRelevance(userPreferences, recommendation);
        if (relevance.isRelevant) {
          relevant_platform_recommendations_count++;
        }
      });

      db.getAllUsersDistinctRecommendations(userId, (err, userResult) => {
        if (err) {
          return res
            .status(500)
            .json({ error: "Error retrieving user recommendations" });
        }

        const userRecommendations = userResult.recommendations;
        let user_recommendations_count = 0; // (TP + FP)
        let relevant_user_recommendations_count = 0; // (TP)

        userRecommendations.forEach((recommendation) => {
          const relevance = hf.checkRelevance(userPreferences, recommendation);
          if (relevance.isRelevant) {
            relevant_user_recommendations_count++;
          }
          user_recommendations_count++;
        });

        const relevant_non_given_recommendations_count =
          relevant_platform_recommendations_count -
          relevant_user_recommendations_count; // (TP + FN) - (TP) = (FN)

        // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ False Negative Rate - FN / (FN + TP)
        const fnr_exact =
          relevant_platform_recommendations_count > 0
            ? Math.round(
                (relevant_non_given_recommendations_count /
                  relevant_platform_recommendations_count) *
                  Math.pow(10, 16)
              ) / Math.pow(10, 16)
            : 0;

        const fnr_fixed = parseFloat(fnr_exact.toFixed(2));
        const fnr_percentage = parseFloat((fnr_exact * 100).toFixed(2));

        res.json({
          fnr_exact,
          fnr_fixed,
          fnr_percentage,
          relevant_non_given_recommendations_count,
          relevant_user_recommendations_count,
          user_recommendations_count,
          relevant_platform_recommendations_count,
          total_platform_recommendations_count
        });
      });
    });
  });
});

// –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ False Positive Rate –Ω–∞ –±–∞–∑–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏, –ø—Ä–∞–≤–µ–Ω–∏ –Ω—è–∫–æ–≥–∞ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
app.post("/stats/individual/ai/fpr-total", (req, res) => {
  const { token, userPreferences } = req.body;

  if (!userPreferences) {
    return res.status(400).json({ error: "Missing userPreferences object" });
  }

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid token" });
    const userId = decoded.id;

    db.getAllPlatformDistinctRecommendations((err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Error retrieving recommendations" });
      }

      const total_platform_recommendations_count = result.total_count;
      const recommendations = result.recommendations;
      let irrelevant_platform_recommendations_count = 0; // (FP + TN)

      recommendations.forEach((recommendation) => {
        const relevance = hf.checkRelevance(userPreferences, recommendation);
        if (!relevance.isRelevant) {
          irrelevant_platform_recommendations_count++;
        }
      });

      db.getAllUsersDistinctRecommendations(userId, (err, userResult) => {
        if (err) {
          return res
            .status(500)
            .json({ error: "Error retrieving user recommendations" });
        }

        const userRecommendations = userResult.recommendations;
        let user_recommendations_count = 0; // (FP + TP)
        let irrelevant_user_recommendations_count = 0; // (FP)

        userRecommendations.forEach((recommendation) => {
          const relevance = hf.checkRelevance(userPreferences, recommendation);
          if (!relevance.isRelevant) {
            irrelevant_user_recommendations_count++;
          }
          user_recommendations_count++;
        });

        // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ False Positive Rate - FN / (FN + TP)
        const fpr_exact =
          irrelevant_platform_recommendations_count > 0
            ? Math.round(
                (irrelevant_user_recommendations_count /
                  irrelevant_platform_recommendations_count) *
                  Math.pow(10, 16)
              ) / Math.pow(10, 16)
            : 0;

        const fpr_fixed = parseFloat(fpr_exact.toFixed(2));
        const fpr_percentage = parseFloat((fpr_exact * 100).toFixed(2));

        res.json({
          fpr_exact,
          fpr_fixed,
          fpr_percentage,
          irrelevant_user_recommendations_count,
          user_recommendations_count,
          irrelevant_platform_recommendations_count,
          total_platform_recommendations_count
        });
      });
    });
  });
});

// –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –±—Ä–æ—è –∫–Ω–∏–≥–∏ —Å —Ñ–∏–ª–º–æ–≤–∏ –∏ —Å–µ—Ä–∏–∞–ª–Ω–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
app.get("/stats/platform/adaptations", (req, res) => {
  db.countBookAdaptations((err, result) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "Error fetching book adaptations count" });
    }

    // –í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –∫–∞—Ç–æ JSON
    res.json(result);
  });
});

// –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –º–æ–∑—ä—á–Ω–∏—è –∞–Ω–∞–ª–∏–∑, —Å–≤—ä—Ä–∑–∞–Ω–∏ —Å —Ñ–∏–ª–º–∏, —Å–µ—Ä–∏–∞–ª–∏ –∏ –∫–Ω–∏–≥–∏.
app.post("/save-brain-analysis", (req, res) => {
  const { token, analysisType, data, date } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ª–∏–ø—Å–≤–∞—â–∏ –¥–∞–Ω–Ω–∏
  if (!token || !analysisType || !data || !date || !Array.isArray(data)) {
    return res.status(400).json({
      error: "–í—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –∏ 'data' —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –º–∞—Å–∏–≤."
    });
  }

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ—Ç–æ ID
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) {
      console.log(err);
      return res.status(401).json({ error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ç–æ–∫–µ–Ω." });
    }

    const userId = decoded.id;

    const saveFunction =
      analysisType === "movies_series"
        ? db.saveMoviesSeriesBrainAnalysis
        : analysisType === "books"
        ? db.saveBooksBrainAnalysis
        : null;

    if (!saveFunction) {
      return res.status(400).json({ error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ç–∏–ø –∞–Ω–∞–ª–∏–∑." });
    }

    // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—Å–µ–∫–∏ –æ–±–µ–∫—Ç –≤ –º–∞—Å–∏–≤–∞ data
    const savePromises = data.map((entry) => {
      return new Promise((resolve, reject) => {
        saveFunction(userId, entry, date, (err, result) => {
          if (err) {
            reject(err);
          } else {
            resolve(result);
          }
        });
      });
    });

    Promise.all(savePromises)
      .then(() => {
        res.status(201).json({
          message: `–î–∞–Ω–Ω–∏—Ç–µ –∑–∞ –º–æ–∑—ä—á–Ω–∏—è –∞–Ω–∞–ª–∏–∑ –Ω–∞ ${analysisType} —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ!`
        });
      })
      .catch((error) => {
        res.status(500).json({ error: error.message });
      });
  });
});

// –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –Ω–æ–≤–∞ –≤—Ä—ä–∑–∫–∞
io.on("connection", (socket) => {
  console.log("–ö–ª–∏–µ–Ω—Ç —Å–µ —Å–≤—ä—Ä–∑–∞");
  socket.emit("connectSignal");

  socket.on("hardwareData", (data) => {
    console.log("–ü–æ–ª—É—á–µ–Ω–∏ —Ö–∞—Ä–¥—É–µ—Ä–Ω–∏ –¥–∞–Ω–Ω–∏:", data);

    const useFileMode = data.useFileMode === true; // –¥–∞–ª–∏ –∏—Å–∫–∞–º–µ –¥–∞ —Å–∏–º—É–ª–∏—Ä–∞–º–µ –æ—Ç —Ñ–∞–π–ª

    if (useFileMode) {
      // ----------- FILE MODE: –°–∏–º—É–ª–∞—Ü–∏—è —á—Ä–µ–∑ JSON —Ñ–∞–π–ª ----------- //
      const sessionId = data.sessionId || 1;
      if (sessionId < 1 || sessionId > 5) {
        console.error("–ù–µ–≤–∞–ª–∏–¥–µ–Ω sessionId:", sessionId);
        return;
      }

      const sessionFile = path.join(
        __dirname,
        `session_data_${sessionId}.json`
      );
      fs.readFile(sessionFile, "utf8", (err, fileData) => {
        if (err) {
          console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ —Ñ–∞–π–ª–∞:", err);
          return;
        }

        let jsonData;
        try {
          jsonData = JSON.parse(fileData);
        } catch (parseErr) {
          console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏—Ä–∞–Ω–µ –Ω–∞ JSON:", parseErr);
          return;
        }

        jsonData.forEach((item, index) => {
          setTimeout(() => {
            socket.broadcast.emit("hardwareDataResponse", item);
            if (index === jsonData.length - 1) {
              socket.broadcast.emit("dataDoneTransmittingSignal");
            }
          }, index * 1000); // –º–æ–∂–µ—à –¥–∞ —Å–º–µ–Ω–∏—à –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–ø–æ—Ä–µ–¥ —Ä–µ–∞–ª–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç
        });
      });
    } else {
      // ----------- REAL MODE: –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–ª–µ–Ω —Ö–∞—Ä–¥—É–µ—Ä ----------- //
      // –¥–∏—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–ø—Ä–∞—â–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
      socket.broadcast.emit("hardwareDataResponse", data);
    }
  });

  socket.on("dataDoneTransmitting", (data) => {
    console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–∞ –¥–∞–Ω–Ω–∏:", data);
    socket.broadcast.emit("dataDoneTransmittingSignal");
  });

  socket.on("disconnect", () => {
    console.log("–ö–ª–∏–µ–Ω—Ç—ä—Ç –ø—Ä–µ–∫—ä—Å–Ω–∞ –≤—Ä—ä–∑–∫–∞—Ç–∞");
  });
});

// // –ö–æ–≥–∞—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–µ —Å–≤—ä—Ä–∂–µ —Å—ä—Å SocketIO —Å—ä—Ä–≤—ä—Ä–∞
// io.on("connection", (socket) => {
//   console.log("–ö–ª–∏–µ–Ω—Ç —Å–µ —Å–≤—ä—Ä–∑–∞");

//   // –¢–æ–≤–∞ —â–µ –∏–∑–ø—Ä–∞—Ç–∏ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ–π—Ç–æ —Å–µ —Å–≤—ä—Ä–∑–≤–∞.
//   socket.emit("connectSignal");

//   // –°–ª—É—à–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ 'hardwareData' –æ—Ç –∏–∑–ø—Ä–∞—â–∞—â–æ—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (python app)
//   socket.on("hardwareData", (data) => {
//     console.log("–ü–æ–ª—É—á–µ–Ω–∏ —Ö–∞—Ä–¥—É–µ—Ä–Ω–∏ –¥–∞–Ω–Ω–∏:", data);

//     // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∫—ä–º –≤—Å–∏—á–∫–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏, –æ—Å–≤–µ–Ω –∫—ä–º –∏–∑–ø—Ä–∞—â–∞—â–∏—è (–∑–∞—â–æ—Ç–æ –µ –±–µ–∑—Å–º–∏—Å–ª–µ–Ω–æ)
//     socket.broadcast.emit("hardwareDataResponse", data);
//   });

//   // –°–ª—É—à–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ 'dataDoneTransmitting' –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
//   socket.on("dataDoneTransmitting", (data) => {
//     console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–∞ –¥–∞–Ω–Ω–∏:", data);
//     // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª –¥–æ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏, —á–µ –∏–∑–ø—Ä–∞—â–∞—â–æ—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (python app) –µ —Å–ø—Ä—è–ª–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç –¥–∞–Ω–Ω–∏.
//     socket.broadcast.emit("dataDoneTransmittingSignal");
//   });

//   // –°–ª—É—à–∞–Ω–µ –∑–∞ –ø—Ä–µ–∫—ä—Å–≤–∞–Ω–µ –Ω–∞ –≤—Ä—ä–∑–∫–∞—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç
//   socket.on("disconnect", () => {
//     console.log("–ö–ª–∏–µ–Ω—Ç—ä—Ç –ø—Ä–µ–∫—ä—Å–Ω–∞ –≤—Ä—ä–∑–∫–∞—Ç–∞");
//   });
// });

// –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞
server.listen(5000, () => {
  console.log("Server started on port 5000.");
});
